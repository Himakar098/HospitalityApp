# -*- coding: utf-8 -*-
"""FilePreprocess.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpJxRDbxhUaRD2LR9eJs4MQMzuig6pJP
"""

import os
from pydub import AudioSegment
import torchaudio
import torchaudio.transforms as T

# Function to convert audio to WAV using pydub
def convert_audio_to_wav(input_path, output_path):
    print(f"Converting {input_path} to WAV: {output_path}")
    audio = AudioSegment.from_file(input_path)
    audio.export(output_path, format="wav")

# Check for WAV file or convert if not present
def get_wav_file(file_path, output_dir):
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    wav_file = os.path.join(output_dir, base_name + ".wav")

    if file_path.endswith(".wav"):
        print(f"Found WAV file: {file_path}")
        return file_path
    else:
        print(f"WAV file not found. Converting {file_path} to {wav_file}.")
        convert_audio_to_wav(file_path, wav_file)
        return wav_file

# Function to apply noise reduction
def reduce_noise(wav_file, output_file):
    print(f"Reducing noise for {wav_file}")
    # Load the audio file
    waveform, sample_rate = torchaudio.load(wav_file)

    # Apply noise reduction
    noise_reduction_transform = T.Vad(sample_rate=sample_rate)
    cleaned_waveform = noise_reduction_transform(waveform)

    # Save the cleaned audio file
    torchaudio.save(output_file, cleaned_waveform, sample_rate)
    print(f"Saved cleaned file to {output_file}")

# Process a single audio file
def process_audio_file(file_path, output_dir):
    # Get or create WAV file
    wav_file_path = get_wav_file(file_path, output_dir)

    # Define output path for cleaned audio
    cleaned_file_path = os.path.join(output_dir, os.path.basename(wav_file_path))

    # Apply noise reduction and save the cleaned file
    reduce_noise(wav_file_path, cleaned_file_path)

# Main function to process a list of audio files
def main(input_directory, output_directory):
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    audio_files = [os.path.join(input_directory, file) for file in os.listdir(input_directory) if file.endswith(('.wav', '.mp3', '.flac'))]

    for file_path in audio_files:
        process_audio_file(file_path, output_directory)

# Example usage
input_dir = r"/content/sample_data/Speech_data"  # Your dataset folder with original audio files
output_dir = r"/content/cleaned_audio"  # Output directory for cleaned audio files

# Run the main function
main(input_dir, output_dir)